{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a34cc8bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "# Define o tamanho do labirinto\n",
    "tamanho_labirinto = 10\n",
    "\n",
    "# Define a posição inicial do personagem e do objeto\n",
    "posicao_personagem = [0, 0]\n",
    "posicao_objeto = [random.randint(0, tamanho_labirinto-1), random.randint(0, tamanho_labirinto-1)]\n",
    "\n",
    "# Define a posição inicial do inimigo\n",
    "posicao_inimigo = [random.randint(0, tamanho_labirinto-1), random.randint(0, tamanho_labirinto-1)]\n",
    "\n",
    "# Define os níveis de dificuldade\n",
    "niveis_dificuldade = {\n",
    "    \"1\": {\"velocidade_inimigo\": 1, \"tentativas\": 10},\n",
    "    \"2\": {\"velocidade_inimigo\": 2, \"tentativas\": 7},\n",
    "    \"3\": {\"velocidade_inimigo\": 3, \"tentativas\": 5}\n",
    "}\n",
    "\n",
    "# Define a função para mover o personagem\n",
    "def mover_personagem():\n",
    "    direcao = input(\"Para onde você quer se mover? (cima, baixo, esquerda, direita) \")\n",
    "    if direcao == \"cima\":\n",
    "        if posicao_personagem[0] > 0:\n",
    "            posicao_personagem[0] -= 1\n",
    "    elif direcao == \"baixo\":\n",
    "        if posicao_personagem[0] < tamanho_labirinto-1:\n",
    "            posicao_personagem[0] += 1\n",
    "    elif direcao == \"esquerda\":\n",
    "        if posicao_personagem[1] > 0:\n",
    "            posicao_personagem[1] -= 1\n",
    "    elif direcao == \"direita\":\n",
    "        if posicao_personagem[1] < tamanho_labirinto-1:\n",
    "            posicao_personagem[1] += 1\n",
    "\n",
    "# Define a função para mover o inimigo\n",
    "def mover_inimigo():\n",
    "    if posicao_inimigo[0] < posicao_personagem[0]:\n",
    "        posicao_inimigo[0] += 1\n",
    "    elif posicao_inimigo[0] > posicao_personagem[0]:\n",
    "        posicao_inimigo[0] -= 1\n",
    "    elif posicao_inimigo[1] < posicao_personagem[1]:\n",
    "        posicao_inimigo[1] += 1\n",
    "    elif posicao_inimigo[1] > posicao_personagem[1]:\n",
    "        posicao_inimigo[1] -= 1\n",
    "\n",
    "# Define a função para verificar se o personagem pegou o objeto\n",
    "def pegar_objeto():\n",
    "    if posicao_personagem == posicao_objeto:\n",
    "        print(\"Parabéns! Você pegou o objeto!\")\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# Define a função para verificar\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9237878f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "# Define o tamanho do labirinto\n",
    "tamanho_labirinto = 10\n",
    "\n",
    "# Define a posição inicial do personagem e do objeto\n",
    "posicao_personagem = [0, 0]\n",
    "posicao_objeto = [random.randint(0, tamanho_labirinto-1), random.randint(0, tamanho_labirinto-1)]\n",
    "\n",
    "# Define a posição inicial do inimigo\n",
    "posicao_inimigo = [random.randint(0, tamanho_labirinto-1), random.randint(0, tamanho_labirinto-1)]\n",
    "\n",
    "# Define os níveis de dificuldade\n",
    "niveis_dificuldade = {\n",
    "    \"1\": {\"velocidade_inimigo\": 1, \"tentativas\": 10},\n",
    "    \"2\": {\"velocidade_inimigo\": 2, \"tentativas\": 7},\n",
    "    \"3\": {\"velocidade_inimigo\": 3, \"tentativas\": 5}\n",
    "}\n",
    "\n",
    "# Define a função para mover o personagem\n",
    "def mover_personagem():\n",
    "    direcao = input(\"Para onde você quer se mover? (cima, baixo, esquerda, direita) \")\n",
    "    if direcao == \"cima\":\n",
    "        if posicao_personagem[0] > 0:\n",
    "            posicao_personagem[0] -= 1\n",
    "    elif direcao == \"baixo\":\n",
    "        if posicao_personagem[0] < tamanho_labirinto-1:\n",
    "            posicao_personagem[0] += 1\n",
    "    elif direcao == \"esquerda\":\n",
    "        if posicao_personagem[1] > 0:\n",
    "            posicao_personagem[1] -= 1\n",
    "    elif direcao == \"direita\":\n",
    "        if posicao_personagem[1] < tamanho_labirinto-1:\n",
    "            posicao_personagem[1] += 1\n",
    "\n",
    "# Define a função para mover o inimigo\n",
    "def mover_inimigo():\n",
    "    if posicao_inimigo[0] < posicao_personagem[0]:\n",
    "        posicao_inimigo[0] += 1\n",
    "    elif posicao_inimigo[0] > posicao_personagem[0]:\n",
    "        posicao_inimigo[0] -= 1\n",
    "    elif posicao_inimigo[1] < posicao_personagem[1]:\n",
    "        posicao_inimigo[1] += 1\n",
    "    elif posicao_inimigo[1] > posicao_personagem[1]:\n",
    "        posicao_inimigo[1] -= 1\n",
    "\n",
    "# Define a função para verificar se o personagem pegou o objeto\n",
    "def pegar_objeto():\n",
    "    if posicao_personagem == posicao_objeto:\n",
    "        print(\"Parabéns! Você pegou o objeto!\")\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# Define a função para verificar se o inimigo pegou o personagem\n",
    "def pegar_personagem():\n",
    "    if posicao_inimigo == posicao_personagem:\n",
    "        print(\"Game over! O inimigo te pegou.\")\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# Define a função para imprimir o labirinto\n",
    "def imprimir_labirinto():\n",
    "    for linha in range(tamanho_labirinto):\n",
    "        for coluna in range(tamanho_labirinto):\n",
    "            if posicao_personagem == [linha, coluna]:\n",
    "                print(\"P\", end=\"\")\n",
    "            elif posicao_objeto == [linha, coluna]:\n",
    "                print(\"O\", end=\"\")\n",
    "            elif posicao_inimigo == [linha, coluna]:\n",
    "                print(\"I\", end=\"\")\n",
    "           \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "10ebb426",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "'(' was never closed (1001037684.py, line 64)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"C:\\Users\\PC\\AppData\\Local\\Temp\\ipykernel_19244\\1001037684.py\"\u001b[1;36m, line \u001b[1;32m64\u001b[0m\n\u001b[1;33m    mover_personagem(direcao\u001b[0m\n\u001b[1;37m                    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m '(' was never closed\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "tamanho_labirinto = 10\n",
    "\n",
    "posicao_personagem = [0, 0]\n",
    "posicao_objeto = [0, 0]\n",
    "posicao_inimigo = [0, 0]\n",
    "\n",
    "def gerar_posicao():\n",
    "    return [random.randint(0, tamanho_labirinto - 1), random.randint(0, tamanho_labirinto - 1)]\n",
    "\n",
    "def imprimir_labirinto():\n",
    "    for linha in range(tamanho_labirinto):\n",
    "        for coluna in range(tamanho_labirinto):\n",
    "            if posicao_personagem == [linha, coluna]:\n",
    "                print(\"P\", end=\"\")\n",
    "            elif posicao_objeto == [linha, coluna]:\n",
    "                print(\"O\", end=\"\")\n",
    "            elif posicao_inimigo == [linha, coluna]:\n",
    "                print(\"I\", end=\"\")\n",
    "            else:\n",
    "                print(\".\", end=\"\")\n",
    "        print(\"\")\n",
    "\n",
    "def mover_personagem(direcao):\n",
    "    global posicao_personagem\n",
    "    if direcao == \"cima\":\n",
    "        if posicao_personagem[0] > 0:\n",
    "            posicao_personagem[0] -= 1\n",
    "    elif direcao == \"baixo\":\n",
    "        if posicao_personagem[0] < tamanho_labirinto - 1:\n",
    "            posicao_personagem[0] += 1\n",
    "    elif direcao == \"esquerda\":\n",
    "        if posicao_personagem[1] > 0:\n",
    "            posicao_personagem[1] -= 1\n",
    "    elif direcao == \"direita\":\n",
    "        if posicao_personagem[1] < tamanho_labirinto - 1:\n",
    "            posicao_personagem[1] += 1\n",
    "\n",
    "def mover_inimigo():\n",
    "    global posicao_inimigo\n",
    "    direcao = random.choice([\"cima\", \"baixo\", \"esquerda\", \"direita\"])\n",
    "    if direcao == \"cima\":\n",
    "        if posicao_inimigo[0] > 0:\n",
    "            posicao_inimigo[0] -= 1\n",
    "    elif direcao == \"baixo\":\n",
    "        if posicao_inimigo[0] < tamanho_labirinto - 1:\n",
    "            posicao_inimigo[0] += 1\n",
    "    elif direcao == \"esquerda\":\n",
    "        if posicao_inimigo[1] > 0:\n",
    "            posicao_inimigo[1] -= 1\n",
    "    elif direcao == \"direita\":\n",
    "        if posicao_inimigo[1] < tamanho_labirinto - 1:\n",
    "            posicao_inimigo[1] += 1\n",
    "\n",
    "def jogar():\n",
    "    global posicao_personagem, posicao_objeto, posicao_inimigo\n",
    "    posicao_personagem = gerar_posicao()\n",
    "    posicao_objeto = gerar_posicao()\n",
    "    posicao_inimigo = gerar_posicao()\n",
    "    while True:\n",
    "        imprimir_labirinto()\n",
    "        direcao = input(\"Digite a direção (cima, baixo, esquerda ou direita): \")\n",
    "        mover_personagem(direcao\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f473474a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P.........\n",
      "........O.\n",
      "..I.......\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "Para onde deseja se mover? (cima/baixo/esquerda/direita)cima\n",
      "P.........\n",
      "........O.\n",
      "...I......\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "Para onde deseja se mover? (cima/baixo/esquerda/direita)baix\n",
      "P.........\n",
      "........O.\n",
      "..........\n",
      "...I......\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "Para onde deseja se mover? (cima/baixo/esquerda/direita)esquerda\n",
      "P.........\n",
      "........O.\n",
      "..........\n",
      "....I.....\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_19244\\311956640.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     57\u001b[0m \u001b[1;32mwhile\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     58\u001b[0m     \u001b[0mimprimir_labirinto\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 59\u001b[1;33m     \u001b[0mdirecao\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Para onde deseja se mover? (cima/baixo/esquerda/direita)\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     60\u001b[0m     \u001b[0mmover_personagem\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdirecao\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     61\u001b[0m     \u001b[0mmover_inimigo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m   1180\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1181\u001b[0m             \u001b[1;32mraise\u001b[0m \u001b[0mStdinNotImplementedError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1182\u001b[1;33m         return self._input_request(\n\u001b[0m\u001b[0;32m   1183\u001b[0m             \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1184\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"shell\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1223\u001b[0m                 \u001b[1;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1224\u001b[0m                 \u001b[0mmsg\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"Interrupted by user\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1225\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1226\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1227\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Invalid Message:\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "tamanho_labirinto = 10\n",
    "posicao_personagem = [0, 0]\n",
    "posicao_objeto = [random.randint(0, tamanho_labirinto-1), random.randint(0, tamanho_labirinto-1)]\n",
    "posicao_inimigo = [random.randint(0, tamanho_labirinto-1), random.randint(0, tamanho_labirinto-1)]\n",
    "\n",
    "def imprimir_labirinto():\n",
    "    for linha in range(tamanho_labirinto):\n",
    "        for coluna in range(tamanho_labirinto):\n",
    "            if posicao_personagem == [linha, coluna]:\n",
    "                print(\"P\", end=\"\")\n",
    "            elif posicao_objeto == [linha, coluna]:\n",
    "                print(\"O\", end=\"\")\n",
    "            elif posicao_inimigo == [linha, coluna]:\n",
    "                print(\"I\", end=\"\")\n",
    "            else:\n",
    "                print(\".\", end=\"\")\n",
    "        print(\"\")\n",
    "\n",
    "def mover_personagem(direcao):\n",
    "    global posicao_personagem\n",
    "    if direcao == \"cima\":\n",
    "        if posicao_personagem[0] > 0:\n",
    "            posicao_personagem[0] -= 1\n",
    "    elif direcao == \"baixo\":\n",
    "        if posicao_personagem[0] < tamanho_labirinto - 1:\n",
    "            posicao_personagem[0] += 1\n",
    "    elif direcao == \"esquerda\":\n",
    "        if posicao_personagem[1] > 0:\n",
    "            posicao_personagem[1] -= 1\n",
    "    elif direcao == \"direita\":\n",
    "        if posicao_personagem[1] < tamanho_labirinto - 1:\n",
    "            posicao_personagem[1] += 1\n",
    "\n",
    "def mover_inimigo():\n",
    "    global posicao_inimigo\n",
    "    direcoes_possiveis = []\n",
    "    if posicao_inimigo[0] > 0:\n",
    "        direcoes_possiveis.append(\"cima\")\n",
    "    if posicao_inimigo[0] < tamanho_labirinto - 1:\n",
    "        direcoes_possiveis.append(\"baixo\")\n",
    "    if posicao_inimigo[1] > 0:\n",
    "        direcoes_possiveis.append(\"esquerda\")\n",
    "    if posicao_inimigo[1] < tamanho_labirinto - 1:\n",
    "        direcoes_possiveis.append(\"direita\")\n",
    "    direcao = random.choice(direcoes_possiveis)\n",
    "    if direcao == \"cima\":\n",
    "        posicao_inimigo[0] -= 1\n",
    "    elif direcao == \"baixo\":\n",
    "        posicao_inimigo[0] += 1\n",
    "    elif direcao == \"esquerda\":\n",
    "        posicao_inimigo[1] -= 1\n",
    "    elif direcao == \"direita\":\n",
    "        posicao_inimigo[1] += 1\n",
    "\n",
    "while True:\n",
    "    imprimir_labirinto()\n",
    "    direcao = input(\"Para onde deseja se mover? (cima/baixo/esquerda/direita)\")\n",
    "    mover_personagem(direcao)\n",
    "    mover_inimigo()\n",
    "    if posicao_personagem == posicao_objeto:\n",
    "        print(\"Você encontrou o objeto! Parabéns!\")\n",
    "        break\n",
    "    elif posicao_personagem == posicao_inimigo:\n",
    "        print(\"Você foi capturado pelo inimigo! Game over.\")\n",
    "        break\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "36df12e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P.........\n",
      "....O.....\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      "..........\n",
      ".I........\n",
      "..........\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_19244\\4074915318.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     57\u001b[0m \u001b[1;32mwhile\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     58\u001b[0m     \u001b[0mimprimir_labirinto\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 59\u001b[1;33m     \u001b[0mdirecao\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Para onde deseja se mover? (cima/baixo/esquerda/direita)\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     60\u001b[0m     \u001b[0mmover_personagem\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdirecao\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     61\u001b[0m     \u001b[0mmover_inimigo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m   1180\u001b[0m             \u001b[0mmsg\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1181\u001b[0m             \u001b[1;32mraise\u001b[0m \u001b[0mStdinNotImplementedError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1182\u001b[1;33m         return self._input_request(\n\u001b[0m\u001b[0;32m   1183\u001b[0m             \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1184\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"shell\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1223\u001b[0m                 \u001b[1;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1224\u001b[0m                 \u001b[0mmsg\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"Interrupted by user\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1225\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1226\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1227\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Invalid Message:\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "tamanho_labirinto = 10\n",
    "posicao_personagem = [0, 0]\n",
    "posicao_objeto = [random.randint(0, tamanho_labirinto-1), random.randint(0, tamanho_labirinto-1)]\n",
    "posicao_inimigo = [random.randint(0, tamanho_labirinto-1), random.randint(0, tamanho_labirinto-1)]\n",
    "\n",
    "def imprimir_labirinto():\n",
    "    for linha in range(tamanho_labirinto):\n",
    "        for coluna in range(tamanho_labirinto):\n",
    "            if posicao_personagem == [linha, coluna]:\n",
    "                print(\"P\", end=\"\")\n",
    "            elif posicao_objeto == [linha, coluna]:\n",
    "                print(\"O\", end=\"\")\n",
    "            elif posicao_inimigo == [linha, coluna]:\n",
    "                print(\"I\", end=\"\")\n",
    "            else:\n",
    "                print(\".\", end=\"\")\n",
    "        print(\"\")\n",
    "\n",
    "def mover_personagem(direcao):\n",
    "    global posicao_personagem\n",
    "    if direcao == \"cima\":\n",
    "        if posicao_personagem[0] > 0:\n",
    "            posicao_personagem[0] -= 1\n",
    "    elif direcao == \"baixo\":\n",
    "        if posicao_personagem[0] < tamanho_labirinto - 1:\n",
    "            posicao_personagem[0] += 1\n",
    "    elif direcao == \"esquerda\":\n",
    "        if posicao_personagem[1] > 0:\n",
    "            posicao_personagem[1] -= 1\n",
    "    elif direcao == \"direita\":\n",
    "        if posicao_personagem[1] < tamanho_labirinto - 1:\n",
    "            posicao_personagem[1] += 1\n",
    "\n",
    "def mover_inimigo():\n",
    "    global posicao_inimigo\n",
    "    direcoes_possiveis = []\n",
    "    if posicao_inimigo[0] > 0:\n",
    "        direcoes_possiveis.append(\"cima\")\n",
    "    if posicao_inimigo[0] < tamanho_labirinto - 1:\n",
    "        direcoes_possiveis.append(\"baixo\")\n",
    "    if posicao_inimigo[1] > 0:\n",
    "        direcoes_possiveis.append(\"esquerda\")\n",
    "    if posicao_inimigo[1] < tamanho_labirinto - 1:\n",
    "        direcoes_possiveis.append(\"direita\")\n",
    "    direcao = random.choice(direcoes_possiveis)\n",
    "    if direcao == \"cima\":\n",
    "        posicao_inimigo[0] -= 1\n",
    "    elif direcao == \"baixo\":\n",
    "        posicao_inimigo[0] += 1\n",
    "    elif direcao == \"esquerda\":\n",
    "        posicao_inimigo[1] -= 1\n",
    "    elif direcao == \"direita\":\n",
    "        posicao_inimigo[1] += 1\n",
    "\n",
    "while True:\n",
    "    imprimir_labirinto()\n",
    "    direcao = input(\"Para onde deseja se mover? (cima/baixo/esquerda/direita)\")\n",
    "    mover_personagem(direcao)\n",
    "    mover_inimigo()\n",
    "    if posicao_personagem == posicao_objeto:\n",
    "        print(\"Você encontrou o objeto! Parabéns!\")\n",
    "        break\n",
    "    elif posicao_personagem == posicao_inimigo:\n",
    "        print(\"Você foi capturado pelo inimigo! Game over.\")\n",
    "       \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e7d7c96",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
